Krok 1: Utworzenie projektu
Otwórz Visual Studio.

Kliknij "Create a new project".

Wybierz "Windows Forms App (.NET Framework)" i kliknij "Next".

Nazwij projekt (np. "CalendarApp") i kliknij "Create".

Krok 2: Projektowanie interfejsu użytkownika
1. Ustawienia głównego okna
Kliknij Form1 w oknie „Solution Explorer”.

W Properties, ustaw:

Text → "Calendar Task Manager"

Size → 800x500

MinimumSize → 800x500

2. Dodanie menu (MenuStrip)
Przeciągnij MenuStrip na formularz.

Kliknij "Type Here", dodaj opcję "File".

Pod "File" dodaj dwie pozycje:

"Load" (do ładowania pliku CSV)

"Save" (do zapisywania pliku CSV)

3. Dodanie kontenera (SplitContainer)
Dodaj SplitContainer i ustaw:

Dock → Fill

Orientation → Vertical

SplitterDistance → 300

4. Dodanie kalendarza
W Panel1 SplitContainera dodaj MonthCalendar.

Ustaw Dock → Fill.

5. Dodanie listy zadań (ListView)
W Panel2 SplitContainera dodaj ListView.

Ustaw:

View → Details

CheckBoxes → True

FullRowSelect → True

Dodaj kolumny:

"Done" (50px)

"Date" (100px)

"Task" (500px)

6. Dodanie przycisków "Add" i "Delete"
Dodaj Button o nazwie "Add":

Text → "Add"

Size → 100x40

BackColor → Green

ForeColor → ButtonHighlight

Dock → Bottom

Dodaj Button o nazwie "Delete":

Text → "Delete"

Size → 100x40

BackColor → IndianRed

ForeColor → ControlText

Dock → Bottom



private void monthCalendar1_DateChanged(object sender, DateRangeEventArgs e)
{
    FilterTasksByDateRange(e.Start, e.End);
}

private void FilterTasksByDateRange(DateTime startDate, DateTime endDate)
{
    foreach (ListViewItem item in listView1.Items)
    {
        DateTime taskDate = DateTime.Parse(item.SubItems[1].Text);
        item.Visible = taskDate >= startDate && taskDate <= endDate;
    }
}

private void FilterTasksByDateRange(DateTime startDate, DateTime endDate)
{
    foreach (ListViewItem item in listView1.Items)
    {
        DateTime taskDate = DateTime.Parse(item.SubItems[1].Text);
        item.Visible = taskDate >= startDate && taskDate <= endDate;
    }
}

private void UpdateBoldedDates()
{
    monthCalendar1.BoldedDates = listView1.Items
        .Cast<ListViewItem>()
        .Select(item => DateTime.Parse(item.SubItems[1].Text))
        .Distinct()
        .ToArray();
}

 Wywołaj UpdateBoldedDates() po dodaniu lub usunięciu zadania: Po dodaniu nowego zadania:

csharp
Kopiuj
Edytuj
UpdateBoldedDates();

 Aktualizowanie pogrubienia po wczytaniu pliku CSV
Jeśli wczytujesz dane z pliku, dodaj UpdateBoldedDates(); po załadowaniu listy:

private void LoadFromFile(string filePath)
{
    listView1.Items.Clear();

    using (var reader = new StreamReader(filePath))
    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
    {
        var tasks = csv.GetRecords<TaskItem>().ToList();

        foreach (var task in tasks)
        {
            var item = new ListViewItem("") { Checked = task.Done };
            item.SubItems.Add(task.Date.ToShortDateString());
            item.SubItems.Add(task.TaskDescription);
            listView1.Items.Add(item);
        }
    }

    UpdateBoldedDates(); // Dodaj to tutaj
}
